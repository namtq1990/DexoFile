#include "ncmanager.h"
#include "model/Calibration.h"
#include "model/DetectorProp.h"
#include "model/DetectorCalibConfig.h"
#include "detectorcomponent.h"
#include "componentmanager.h"
#include "component/settingmanager.h"
#include "util/NcLibrary.h"
#include "util/ndt_util.h"
#include <QElapsedTimer>

using namespace nucare;
using namespace std;

NcManager::NcManager(const QString& tag)
    : Component(tag)
{
    logI() << "NcManager initialized.";
}

NcManager::~NcManager()
{
    logI() << "NcManager destroyed.";
}

void NcManager::updateCalibFromRawPeak(Calibration *calib, const Coeffcients &foundPeaks)
{
    auto ratio = calib->getRatio();
    auto chPeaks = calib->chCoefficients();
    bool needUpdate = ratio == 0;
    if (!needUpdate) {
        for (nucare::uint i = 0; i < foundPeaks.size(); i++) {
            if (((int) chPeaks[i] * ratio) != (int) foundPeaks[i]) {
                needUpdate = true;
                break;
            }
        }
    }

    if (!needUpdate) return;

    Coeffcients stdPeaks = {nucare::CS137_PEAK1, nucare::CS137_PEAK2, nucare::K40_PEAK};
    Coeffcients fitParam = NcLibrary::computeCalib(foundPeaks, stdPeaks);
    Coeffcients convCoeff;
    ratio = NcLibrary::calibConvert(fitParam.data(), convCoeff.data());

    calib->setRatio(ratio);
    calib->setCoefficients(convCoeff);

    for (nucare::uint i = 0; i < convCoeff.size(); i++) {
        convCoeff[i] = foundPeaks[i] / ratio;
    }

    calib->setChCoefficients(convCoeff);
    calib->setDate(QDateTime::currentDateTime());
}

void NcManager::computeCalibration(nucare::DetectorComponent *dev, std::shared_ptr<Spectrum> spc,
                                   std::shared_ptr<HwSpectrum> hwSpc, Calibration::Mode mode, bool updateStdPeaks)
{
    auto prop = dev->properties();
    string tag = "Calibration";
    HwSpectrum temp;
    logD() << "time: " << hwSpc->getAcqTime() << ", HwSPC: " << hwSpc->toString();
    NcLibrary::AdaptFilter(hwSpc.get(), &temp, prop->mFHM, nullptr);
    auto peaks = NcLibrary::FindPeak(&temp, prop->mPeakInfo);
    if (peaks[0] == 0 || peaks[1] == 0) {
        NC_THROW_ALG_ERROR("FindPeak failed.");
    }

    if (prop->info.serialNumber == "940060" && peaks[0] > 4) {
        peaks[0] -= 4;
    }

    //peaks[0] = peaks[0] - 3;
    // Finding K40
    /*......Hung-2024/05/21.................................................................................
     * There are 2 cases to calibration:
     * 1) Cs-137: then from 662keV to estimate K40 peak
     * 2) Cs-137+Co60: Find peak from 1.332 Mev then estimate K40
     */

    //if (Calibration::compareModes(mode, Calibration::CO_60))
    int K40_Ch = 0;
    Coeffcients CurPeak = {peaks[0], peaks[1], 0};
    if(mode == Calibration::SPRD_CO_60) {
        K40_Ch = NcLibrary::FindK40CalibCo60(&temp,  CurPeak, prop.get());
    } else if(mode == Calibration::SPRD_CS_137) {
        auto calib = prop->getCalibration();
        Coeffcients hwPeak = calib->chCoefficients();
        for (auto i = 0; i < hwPeak.size(); i++) {
            hwPeak[i] *= calib->getRatio();
        }

        K40_Ch = NcLibrary::K40EstRefEnergy( hwPeak, CurPeak);
    }
    else //HH300 Device
    {
//        K40_Ch=FindK40Peak(&temp,  CurPeak,  dev );
    }

    if (K40_Ch == 0) {
        NC_THROW_ALG_ERROR("Can't find K40 peak");
    }

    logD() << "Peak calibs: " << peaks[0] << ',' << peaks[1] << ',' << K40_Ch;



    Coeffcients foundPeaks = {peaks[0], peaks[1], (double) K40_Ch};
    shared_ptr<Calibration> ret = prop->getCalibration();
    auto dbManager = ComponentManager::instance().databaseManager();

    if (updateStdPeaks) {
        DetectorCalibConfig calibConf = {
            .spc = hwSpc,
            .time = QDateTime::currentDateTime(),
            .calib = foundPeaks,
            .detectorId = prop->getId()
        };
        ret->setStdPeaks(calibConf.calib);

        dbManager->insertDetectorCalibConfig(&calibConf);
    }

    updateCalibFromRawPeak(ret.get(), foundPeaks);

    ret->setSpc(hwSpc);
    ret->setTemperature(prop->getRawTemperature());
    ret->setGC(prop->getGC());
    ret->setDetectorId(prop->getId());
    ret->setDate(QDateTime::currentDateTime());

    dbManager->insertCalibration(ret.get());
    prop->setCalibration(ret);

    dev->sendUpdateCalib(foundPeaks[0], foundPeaks[1], foundPeaks[2]);
}

DetectorComponent *NcManager::getCurrentDetector()
{
    return ComponentManager::instance().detectorComponent();
}

void NcManager::onRecvGC(nucare::DetectorComponent* dev, std::shared_ptr<GcResponse> message) {
    logD() << "Received gc " << message->serial << ':' << message->gc << "," << message->detType;
    std::shared_ptr<Calibration> calib = dev->properties()->getCalibration();

    if (calib != nullptr) {
        Coeffcients foundPeaks = {
            (double) message->cs137Ch1,
            (double) message->cs137Ch2,
            (double) message->k40Ch
        };
        updateCalibFromRawPeak(calib.get(), foundPeaks);
        calib->setGC(message->gc);
    }
}

void NcManager::onRecvPackage(nucare::DetectorComponent* dev, std::shared_ptr<DetectorPackage> pkg)
{
    if (!pkg) {
        logE() << "Received null spectrum data from detector.";
        return;
    }

    auto prop = dev->properties();
    if (!prop || !prop->isInitialized()) return;

    shared_ptr<Spectrum> spc = make_shared<Spectrum>();
    prop->mOriginSpc = pkg->spc;

    if (pkg->spc->getSize() != Spectrum::getSize()) {
        auto ratio = prop->getCalibration()->getRatio();
//        Spectrum::Channel* data = new Spectrum::Channel[Spectrum::getSize()];
//        NcLibrary::convertSpectrum(spc->data(), spc->getSize(), data, Spectrum::getSize(), ratio);
//        spc = make_shared<Spectrum>(data);
        HwSpectrum::convertSpectrum<Spectrum>(*pkg->spc, *spc, ratio);
        spc->update();
    }

    spc->setFillCps(pkg->pileup);
    spc->setDetectorID(prop->getId());
    prop->mSpc = spc;
    prop->mSpc->setRealTime(pkg->realtime);

    auto cps0=spc->getTotalCount()/(pkg->realtime == 0 ? 1 : pkg->realtime);

    prop->setRawCps(cps0);

    //Smoothing CPS in 3 sec
    prop->setCps(mAvgCps.addedValue(cps0));
    logD() << "cps: " << spc->getTotalCount()
           << ", avg: " << prop->mCPS
           << " , pilup: " << spc->getFillCps()
           << ", realtime: " << pkg->realtime;

    //end smoothing

//    auto doserate = NcLibrary::computeDoserate(spc, prop->getCoeffcients(),
//                                                 prop->getGeCoeffcients());
//    if (spc->getTotalCount()) {
//        doserate += (doserate * (spc->getFillCps()) / spc->getTotalCount());
//    }
//    prop->mDoserate = mAvgDoserate.addedValue(doserate);

    prop->setGM(pkg->gm);

    prop->debugInfo.spcDoserate0 = prop->mDoserate;
    prop->debugInfo.spcDoserate1= prop->mDoserate;


    //Calcuate Dose GM
//    auto avgGM = prop->getGmCount();
//    auto DoseGM = NcLibrary::GM_to_nSV(avgGM);

//    prop->debugInfo.gmDoserate = DoseGM;

//    prop->mDoserate = NcLibrary::DoseCSI_Factor_nSV(prop->mDoserate);

//    if (prop->mDoserate > nucare::config::DOSE_RATE_THRSHLD_NAI_LOW) //100 uSv/h
//    {
//       // prop->mDoserate = NcLibrary::DoseCSI_Factor_nSV(prop->mDoserate);
//        prop->debugInfo.spcDoserate1 = prop->mDoserate;

//        if( prop->mDoserate >  nucare::config::DOSE_RATE_THRSHLD_NAI )
//        {
//            if(DoseGM > nucare::config::DOSE_RATE_THRSHLD_NAI)
//            {
//                prop->mDoserate = DoseGM;
//                prop->setCps(avgGM);
//            }
//        }
//        else
//        {
//            if(DoseGM > nucare::config::DOSE_RATE_THRSHLD_NAI)
//            {
//                prop->mDoserate = DoseGM;
//                prop->setCps(avgGM);
//            }
//        }
//    }

//    prop->setHasNeutron(pkg->hasNeutron);
//    if (pkg->hasNeutron) {
//        prop->setNeutron(mAvgNeutron.addedValue(pkg->neutron));
//    }


    // TODO DEBUG
//    if (prop->mDoserate > 100) {
//        prop->setCps(10000);
//        prop->setCps0(10000);
//        prop->mDoserate = 100000;
//    }

    prop->setGC(pkg->gc);
    prop->setTemperature(pkg->temperature);
    prop->setRawTemperature(pkg->temperatureRaw);

    const Spectrum::Channel spcDataTst[1024] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 717.107719, 7892.427908, 14521.73797, 18099.04121, 17189.45096, 13731.48387, 9396.763314, 6160.332033, 4525.560344, 3658.825038, 3454.422014, 3455.353598, 3448.885272, 3536.609814, 3666.198838, 3655.679225, 3861.261388, 4458.123984, 5029.062478, 6060.616528, 7249.958978, 8555.67478, 9957.47177, 10783.32948, 11217.90084, 10967.12231, 10265.93741, 8819.018544, 7553.449118, 6446.456542, 5534.129104, 4885.946383, 4541.894118, 4405.753621, 4310.421366, 4237.847774, 4259.295657, 4507.589037, 4390.748406, 4359.498139, 4361.781247, 4334.931835, 4418.036084, 4461.44562, 4281.93457, 4361.289321, 4415.544813, 4381.667524, 4322.298963, 4442.031319, 4465.025353, 4464.070198, 4411.696258, 4352.366568, 4259.14579, 4260.391041, 4023.126262, 3997.038637, 3977.557979, 3946.967806, 3773.886101, 3691.952072, 3537.306206, 3396.257487, 3468.746481, 3421.71177, 3212.171774, 3232.181168, 3129.046627, 3079.150612, 2964.582551, 3038.362744, 2926.039634, 2870.75397, 2813.872006, 2787.798831, 2771.025308, 2572.807834, 2547.951847, 2533.959185, 2571.225801, 2477.261045, 2460.05067, 2421.192426, 2355.211544, 2317.710016, 2285.84094, 2275.28947, 2306.007997, 2266.161975, 2198.379671, 2268.557206, 2300.142809, 2293.780016, 2384.7064, 2492.537899, 2441.414079, 2455.947311, 2545.335697, 2600.555363, 2631.018021, 2720.763482, 2841.855865, 2967.049297, 2978.640904, 2932.388682, 2967.758095, 2944.439189, 2841.492241, 2759.491008, 2800.930004, 2770.13963, 2684.019865, 2595.329244, 2604.100857, 2591.424362, 2877.347909, 2990.532784, 3262.594825, 3464.185057, 3745.683876, 4061.5101, 4450.870403, 4752.00818, 4966.191098, 5193.048361, 5467.433201, 5254.927195, 5243.904312, 5095.95852, 4909.803357, 4412.488888, 4235.249834, 3919.210588, 3389.236937, 3052.961898, 2713.201706, 2350.45242, 2063.059257, 1739.159696, 1565.990332, 1347.9171, 1147.724395, 930.856298, 873.651467, 716.573899, 635.489814, 552.351768, 501.248499, 458.745376, 414.541442, 375.378607, 335.240832, 300.498592, 280.75301, 255.848474, 243.580081, 247.972287, 211.525028, 225.891885, 195.360658, 198.974946, 201.508686, 198.538018, 198.771942, 199.350582, 183.560015, 193.260917, 189.516303, 166.139937, 160.777374, 158.687586, 153.35969, 139.948654, 149.828667, 139.94865, 159.743916, 168.731845, 146.529024, 144.167666, 124.016407, 142.425675, 144.280702, 144.390822, 113.641515, 115.914838, 133.88627, 134.802409, 119.577471, 114.437163, 105.127066, 118.387646, 101.210822, 117.723718, 104.633765, 94.179567, 87.587482, 102.978136, 94.760907, 93.01481, 100.578705, 104.840671, 110.239624, 108.226746, 102.40963, 98.30201, 99.754484, 89.382096, 98.561424, 113.808677, 115.738629, 101.993054, 79.875814, 88.054074, 99.532242, 89.319714, 90.603058, 98.83694, 91.696569, 82.961831, 92.316499, 76.918375, 84.144158, 85.451058, 90.789709, 84.52212, 81.16462, 71.227302, 79.794328, 82.729902, 70.084953, 75.434538, 80.593948, 67.730673, 91.09948, 72.398956, 72.381298, 69.66159, 71.594628, 75.829012, 52.016046, 63.031546, 71.56003, 71.95116, 57.841329, 53.447286, 56.494594, 68.282106, 64.758286, 62.849379, 64.080631, 48.476467, 57.426405, 59.738928, 61.124091, 58.961569, 54.200874, 55.358598, 56.741004, 58.599332, 57.526858, 56.356523, 48.927359, 57.457791, 53.457533, 47.352504, 60.303864, 61.311966, 50.664218, 50.319848, 61.7352, 52.338001, 42.259409, 39.987671, 43.911603, 47.582861, 40.235079, 49.721228, 54.349874, 42.265634, 42.895128, 48.635716, 48.380904, 43.999571, 52.598656, 45.579389, 43.746551, 52.137119, 60.487142, 42.70653, 29.361778, 41.347544, 40.788868, 27.072226, 44.598532, 49.423612, 44.629491, 42.453382, 44.681951, 36.998894, 48.588534, 40.636818, 38.465834, 43.938016, 30.054505, 41.031295, 40.058653, 46.112319, 43.386, 34.912984, 38.722626, 45.051582, 33.432338, 34.666426, 30.873716, 38.399429, 33.744437, 34.725929, 35.013421, 33.19412, 30.247509, 45.367748, 40.77836, 44.556432, 39.877974, 44.837725, 44.60806, 38.749434, 37.116892, 46.267158, 44.435408, 39.435387, 39.435386, 45.904532, 38.19342, 47.048278, 32.595337, 33.154373, 27.405104, 34.29164, 37.956285, 37.369551, 41.359574, 23.067762, 30.443854, 43.822914, 47.482848, 33.760361, 30.363302, 33.218326, 29.363302, 33.864972, 31.610411, 30.932062, 33.610814, 32.18165, 20.88751, 27.315754, 30.139168, 35.30244, 29.475074, 25.653294, 23.780328, 37.942862, 31.069582, 32.82635, 34.065434, 22.166994, 27.177514, 31.771587, 27.207104, 22.293845, 22.741851, 29.805361, 31.862602, 26.3467, 23.004148, 28.866498, 27.454746, 26.092849, 23.183598, 33.407857, 31.29164, 33.991825, 25.718745, 27.920882, 23.305448, 26.284736, 31.69535, 28.292335, 22.337722, 32.077757, 32.218031, 24.365249, 31.449071, 22.289579, 32.289566, 23.289566, 29.140438, 34.598362, 27.761355, 24.147894, 30.821944, 25.025451, 26.596287, 26.205581, 28.39487, 29.61344, 25.004148, 26.521448, 31.80894, 30.877275, 25.740331, 23.954763, 26.1822, 25.057942, 22.096193, 23.019478, 25.053278, 19.809198, 31.928758, 21.004148, 19.489486, 18.832322, 20.806316, 26.071237, 22.80839, 25.210845, 22.058954, 24.36343, 19.705728, 29.614156, 25.261333, 20.838548, 23.585911, 20.156747, 17.461945, 15.411458, 15.707814, 20.349496, 22.397864, 23.068226, 22.944774, 21.406766, 18.844774, 20.703102, 22.332302, 15.703102, 15.022405, 12.579693, 11.561432, 15.41976, 11.278088, 16.45212, 12.721365, 15.002074, 15.426537, 10.716656, 12.009402, 13.696758, 10.443816, 9.72716, 17.553976, 13.868832, 12.869936, 8.563384, 12.286941, 10.861504, 12.002074, 8.716105, 15.002506, 11.144422, 10.287492, 17.721652, 15.0011, 16.13668, 9.006649, 7.710007, 10.003599, 7.713057, 7.581633, 11.713063, 11.291092, 12.002074, 16.434838, 14.127272, 4.272545, 8.597137, 8.451864, 17.11177, 10.459613, 8.866077, 11.548142, 16.33552, 12.660878, 11.625086, 20.536234, 15.613746, 15.390409, 12.456565, 18.011899, 14.118419, 18.783372, 20.748208, 22.893988, 16.075004, 30.850576, 20.553258, 24.522309, 29.793144, 27.301467, 23.277665, 23.407436, 27.171709, 22.289566, 29.213626, 17.766718, 27.846426, 20.060052, 16.674739, 23.544956, 20.665068, 21.958069, 17.670577, 14.511507, 19.620344, 20.7236, 20.86951, 13.682478, 20.002081, 18.126889, 18.004148, 20.340603, 15.32582, 12.21291, 10.249169, 11.163948, 12.676252, 8.918934, 13.471642, 13.532513, 17.166023, 9.324001, 14.702424, 9.200458, 8.639749, 8.558636, 8.166024, 6.761212, 5.977722, 5.738934, 9.548561, 5.241158, 7.568464, 8.168099, 5.773956, 11.849738, 6.65012, 5.130998, 3.793866, 6.117318, 4.510522, 6.436623, 5.25361, 10.771588, 7.688153, 14.287492, 5.828982, 7.28834, 6.40066, 11.292488, 12.032652, 7.249848, 7.827749, 6.634068, 11.653424, 7.318071, 7.747235, 8.176405, 6.333276, 6.241708, 6.551312, 2.638218, 4.143749, 4.252763, 7.456989, 7.041633, 6.754141, 1.714583, 5.64237, 5.96527, 2.536106, 4.929862, 4.143746, 7.143749, 8.149294, 5.672229, 3.609715, 3.35348, 3.104867, 4.62149, 8.53403, 6.104866, 4.675702, 5.429164, 2.531957, 9.161746, 6.920164, 8.102791, 2.673627, 4.595063, 9.203506, 4.244462, 5.04303, 2.815298, 7.429166, 4.94439, 2.913938, 5.615941, 3.341028, 4.330523, 3.75969, 6.188852, 6.858328, 4.909788, 4.429164, 4.332601, 2.761763, 3.858328, 2.95269, 5.716914, 0.95269, 2.429166, 4.334674, 2.903562, 3.718604, 5.809072, 4.37991, 4.950743, 5.486594, 4.94257, 6.958916, 3.806999, 3.429164, 4.960992, 5.897336, 7.429164, 2.519504, 3.963069, 4.466096, 1.821396, 5.143746, 7.591459, 4.498882, 3.429164, 0.802846, 2.396382, 4.032782, 4.024778, 2.404387, 2.515353, 3.655244, 2.601542, 6.458089, 6.400241, 5.745584, 4.112744, 4.026556, 0.915886, 4.714583, 2.404684, 2.02448, 2.488797, 1.940367, 2.917961, 3.429166, 2.164076, 0.694252, 3.429164, 4.205454, 3.162003, 4.509127, 0, 1.269238, 3.079963, 0.905935, 6.079962, 6.636694, 3.273388, 7.521156, 2.870358, 0.714583, 1.912159, 7.638769, 2.097795, 2.41921, 2.504978, 1.714582, 4.067934, 2.36123, 3.279614, 4.149551, 2.714582, 2.640845, 2.429164, 1.71831, 2, 0, 2.998348, 2.001652, 3.713352, 1.572488, 2.071663, 2.786667, 3.429164, 3.927915, 2.146244, 3.28292, 1.359579, 4.867476, 4.842532, 0.788742, 4.714582, 1.714583, 2.647071, 4.076235, 3.505399, 3.629623, 0.923765, 5.0216, 3.638346, 2.340054, 6.24573, 3.845454, 5.065438, 2.636271, 1.714582, 1.714582, 5.461138, 1.968027, 2.080386, 1.429164, 3.429164, 4.938714, 2.919614, 3.429166, 1.775867, 1.714582, 4.714582, 0.917539, 1, 0.678624, 3.262166, 6.714582, 2.084536, 2.513703, 4.344627, 1.401762, 0.456566, 2.486299, 6.001817, 3.799378, 2.429164, 3.429164, 4.429164, 2.659522, 6.08869, 4.539282, 5.177374, 4.680954, 3.429164, 5.46487, 4.161026, 0.767566, 1.323196, 1.676804, 2.181524, 2.623821, 0.714582, 1.949091, 2.480073, 3.050909, 1.134768, 3.143746, 3.528906, 1.19258, 0.236584, 1.714582, 2.380332, 1.048833, 2.809495, 3.429164, 3.429164, 2.667826, 6.096988, 3.187032, 1.764812, 3.429164, 1.806024, 4.052306, 3.669899, 2.277795, 1.669899, 0.330101, 0.198128, 3.429164, 1.957392, 1.900936, 2.471772, 4.386558, 3.815721, 4.941468, 0.898861, 2.060606, 4.18428, 2.67405, 2.081064, 1, 1, 2.453388, 1.61137, 3.182203, 3.637668, 4.819871, 1.2955, 1.10529, 2.534454, 0.89471, 2.714582, 0.750964, 0, 0, 1.107365, 1.714582, 0.714582, 0.965693, 1.497778, 0.680276, 0.319724, 0.21888, 2.605142, 0.714583, 0.714582, 2.682351, 1.064462, 1, 0.22303, 1.77697, 0.54068, 0.45932, 1.939688, 1.429164, 1.429166, 1.201982, 0, 1.542755, 1.457245, 0.971919, 1.028081, 1.802168, 1.197832, 1.660496, 0.339504, 1.518826, 1.481174, 1.377154, 1.622846, 0.353223, 2.646777, 0, 2, 0.97607, 1.02393, 0, 0, 0.834399, 2.165601, 0.527126, 1.472874, 1.692728, 1.714582, 1.59269, 0.836474, 1.163526, 1, 0, 0.694803, 1.714582, 2.590615, 1.677098, 3.429166, 1.16145, 0.732286, 0, 1.82292, 2.17708, 0, 1.555207, 1.444793, 0, 4.795812, 4.03126, 3.557282, 3.458346, 0.1573, 1.271864, 1.714583, 3.415611, 2.013553, 0.714582, 0.869807, 1.559358, 0.440642, 1.977044, 2.429164, 4.011478, 2.714582, 1.714583, 1.714582, 0.714582, 1.714582, 1.714582, 4.294821, 2.268688, 1.731312, 0.563508, 1.992672, 2.436493, 1.007327, 1.843674, 2.565583, 2.590743, 1.565583, 0.434417, 1.989496, 2.010504, 0, 2, 0, 0.567659, 0.432341, 0, 0, 0, 0.14057, 0.85943, 1, 0.284316, 1.714582, 0.714583, 0.286519, 0, 0.857227, 1.714582, 1.714583, 0.713608, 0, 1, 0, 1.718604, 0.281396, 0, 0.003049, 0.996951, 1, 0.146796, 0.853204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0072, 0.9928, 0.436364, 1.563636, 0, 0.580111, 1.419889, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1.155097, 0.844903, 0, 0.298843, 0.701157, 0, 0, 0.157172, 0.842828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    auto testSpc = make_shared<Spectrum>(spcDataTst);
    testSpc->setAcqTime(6500);
    QElapsedTimer timer;
    timer.start();
    auto ret = estimateClog(testSpc, dev);
    logD() << "estimateClog execution time: " << timer.elapsed() << " ms, ret: " << ret.thickness;

    emit spectrumReceived(spc);
}

ClogEstimation NcManager::estimateClog(std::shared_ptr<Spectrum> spc, DetectorComponent* dev) {
    auto prop = dev->properties();
    prop->getCalibration()->setCoefficients({0.000342454, 2.587640967, -8.833218728});
    prop->getBackground()->spc->setAcqTime(180 * 60);
    double bgrData[] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,100.047604,1061.490233,1500.600018,1229.381983,1157.867604,1127.485197,1098.901910,1129.351277,1163.649569,1166.632544,1223.294693,1309.561856,1363.413536,1405.412434,1527.190249,1650.619964,1782.919653,2027.627842,2213.628983,2599.082373,2813.181102,3026.764852,3147.424758,3247.320019,3311.168945,3282.943416,3187.007327,3125.386557,3143.058954,3049.217907,3077.007878,3056.282408,3000.189108,2953.888101,3034.028081,2988.087458,3015.584684,3048.680148,3074.309348,3000.636567,3040.896363,2981.968487,3011.501928,2941.230358,2895.133793,2910.805217,2797.374105,2863.743636,2843.405234,2770.856804,2731.912159,2689.608447,2661.721103,2582.677610,2485.779467,2398.433994,2339.409936,2339.154802,2199.723178,2191.415149,2154.669221,2046.750836,2124.715979,2030.311256,1976.942442,1942.272799,1803.812967,1842.354031,1784.000679,1716.821819,1669.370466,1558.978735,1667.304351,1616.648045,1575.444921,1504.716402,1544.685361,1442.317777,1431.217907,1405.004574,1389.964425,1294.355132,1271.061030,1316.574986,1238.944646,1219.100165,1220.395114,1136.625049,1041.324003,1068.350008,1007.076953,945.744866,935.683158,915.852359,878.992968,861.238492,858.789421,807.000423,750.077042,758.138789,805.440603,704.399304,735.334802,703.082461,680.142478,637.458641,647.336327,660.691882,616.605014,605.137776,570.413664,521.182331,559.242977,570.433443,534.306171,555.974969,517.064590,496.917962,541.910506,500.531238,499.138917,505.743764,483.925289,466.459871,452.552876,469.405746,503.873997,441.487951,445.181909,435.545676,438.918640,401.948117,410.563764,366.037483,368.332176,330.502351,353.005675,301.154379,349.743253,344.015884,304.663673,312.393884,323.394140,287.257209,307.660880,265.755537,257.811148,262.088136,266.758036,271.144297,286.337723,270.078144,247.057430,247.346408,219.324849,216.336199,226.114269,236.283087,224.255095,233.990469,246.500148,208.849438,208.512176,205.512049,212.829697,196.212910,178.025031,189.239083,188.517979,187.265088,203.945491,203.680276,181.633223,196.923214,178.678879,179.234381,192.193977,186.450596,177.642075,189.959212,192.067088,172.259668,171.053535,181.011645,170.710009,159.867859,173.561305,177.954766,174.532507,174.743636,160.559613,145.205455,144.520055,156.114859,160.482827,138.697685,158.826393,141.370082,156.230909,150.883232,125.003305,124.879082,120.434967,131.863876,139.934436,146.733388,140.438990,148.764812,157.936639,146.538860,146.549955,141.650376,146.952563,150.560036,159.485070,148.361614,133.776458,133.640550,151.630341,134.296601,124.719156,133.312948,118.699249,138.278474,121.583710,137.954894,117.244040,113.018127,100.382239,102.871626,118.666044,94.857867,94.742830,96.305620,108.525602,107.642625,99.734784,88.421542,86.230909,90.341746,95.482276,92.968743,103.399264,95.273812,83.735591,80.602939,93.855024,102.193682,79.398163,83.012452,90.099909,95.081488,81.951717,91.459576,74.942737,85.473719,81.553938,71.094785,73.705435,75.975391,90.263691,76.142350,69.008173,73.401212,80.235188,76.141838,73.565161,75.601542,71.874636,63.878954,78.297870,59.350008,53.656346,80.758331,73.056289,64.178899,74.987676,65.126043,76.438695,58.468044,70.248357,77.262717,63.001820,85.951294,75.267291,68.178053,63.326629,65.186777,64.667696,77.013130,63.225657,60.868705,82.800643,66.146501,66.307567,73.089917,67.816272,72.304391,68.013258,50.000974,66.288467,54.941046,54.543434,50.424886,51.536106,59.813095,61.529753,64.391258,60.488925,64.581084,64.201432,64.155097,58.294821,60.050486,57.353224,58.092543,63.254711,51.191056,52.971369,61.840881,57.804115,66.701452,53.307951,54.096565,50.138622,57.692472,68.643215,64.788831,58.545676,55.196180,67.767016,50.422643,47.926263,47.722883,52.004829,40.600864,54.935961,54.295794,52.776969,54.632967,46.812800,50.970395,50.475372,47.662828,58.217907,48.076235,54.497944,55.554489,53.574180,44.906572,43.826648,54.615814,44.972470,40.466648,53.691626,45.579137,41.680404,47.839523,49.403710,53.162847,50.809200,49.431535,48.487951,49.722883,33.576767,51.894160,37.249459,46.997797,39.107621,29.464995,39.887806,49.124646,41.202701,40.581468,41.693023,38.350854,49.266189,43.888062,39.183600,39.285546,43.720808,40.213205,36.773792,49.475244,45.319173,33.998731,43.544703,38.957392,43.648595,44.651349,37.508321,57.557833,46.295794,44.455297,46.691882,37.720808,42.017999,37.951845,43.107365,37.953075,37.165896,39.495997,40.353480,33.375629,45.598365,39.188429,46.283638,46.567915,44.684426,37.829953,36.130744,33.096438,39.435390,39.132819,47.149972,43.263819,35.036126,37.261488,42.038457,41.149972,35.750964,43.064462,33.149166,39.575793,34.420312,32.849477,38.239633,27.537336,31.849477,36.801617,35.184830,36.496420,42.657703,32.577062,26.762442,34.391681,29.178604,28.280716,25.461946,27.174453,22.824996,30.307272,24.231755,24.886960,24.900513,32.523399,27.626574,23.554656,27.426538,28.278090,27.862479,24.901615,19.294270,25.830120,25.442718,24.004151,22.579688,24.872433,13.731312,15.696750,24.423361,20.731863,27.129514,18.294821,21.859853,23.154802,15.860404,14.290670,15.431240,23.715428,21.290119,21.431368,14.572488,24.436236,26.289568,17.281946,14.432764,12.569862,16.873702,26.588835,20.692560,14.720257,15.138622,14.434839,23.893353,20.821780,15.440515,14.298843,19.283893,13.860404,17.419889,15.561561,18.346870,27.433315,19.854729,24.132396,20.297319,26.171148,19.652579,14.794712,24.799925,23.925033,22.681505,26.072931,38.179450,35.321082,26.596713,27.455042,21.982424,29.124095,22.360974,28.944646,39.738001,35.359834,31.655077,29.602939,34.862479,33.876456,39.134088,32.463176,33.976198,27.373259,36.112361,36.498879,39.417263,31.563803,39.873662,38.038329,24.775995,26.163949,28.200203,20.433315,26.700606,23.955189,32.834783,17.983948,23.918935,21.206428,27.271697,18.125364,15.206684,14.637668,14.382790,18.603234,17.267291,18.815849,12.483801,15.024353,8.951589,14.504003,12.002075,7.931387,10.999705,12.030874,10.685784,16.698826,12.783195,18.273812,13.172250,16.442846,12.002075,16.913260,15.750541,8.572911,11.970267,13.489476,13.287493,9.544408,8.115243,12.375079,10.228411,11.377154,12.348651,17.992928,7.082589,9.442462,12.542332,8.446445,8.557705,10.365932,8.474949,5.670873,6.187456,7.252764,4.387530,6.252764,5.104188,9.218034,5.359706,5.429164,5.607640,6.929863,6.180551,8.320826,8.217356,7.070137,7.075685,5.392360,6.858329,9.638898,4.429164,5.506924,6.858329,9.390284,8.961120,3.429164,7.040955,7.143747,9.184702,6.858329,8.798568,4.918090,11.354749,3.134177,7.086061,6.815298,9.689423,8.542460,13.572911,11.276989,10.716657,11.725087,8.572911,8.572911,4.572911,7.195206,4.240312,8.047181,3.143747,7.190928,6.096565,7.525474,10.525730,10.191056,5.092543,3.049256,4.527677,6.094490,3.143747,5.108761,6.455976,7.244335,4.429164,10.377833,0.948668,4.441488,9.338825,4.129347,6.338825,5.767989,6.090340,4.197154,7.143747,5.143747,4.232011,7.681800,6.517429,6.088264,2.659100,3.229935,2.000000,5.482866,6.030707,4.858329,7.858329,8.402608,3.827327,4.345051,5.026556,3.951039,4.252341,7.084114,4.203379,5.143747,6.533608,4.589808,5.675279,5.776290,5.390579,9.673204,2.385711,2.920037,7.109312,7.749016,1.730762,1.063784,0.936216,7.492948,1.922112,4.351277,0.870358,3.065859,2.560882,8.419211,3.297447,3.439118,4.353352,3.866207,3.421286,3.143747,5.143747,6.143747,4.778789,5.656179,1.714582,2.714582,1.784592,4.998348,3.859981,1.642920,3.287070,5.643343,5.143324,4.284995,0.000000,3.503747,5.496253,2.791240,5.723729,4.923342,7.635849,6.447036,5.982129,2.496676,4.662444,3.984627,2.437888,2.143747,4.352929,0.923765,3.714582,4.518274,7.858329,7.130872,4.585786,5.272543,5.429164,1.429164,3.429164,6.382829,5.475500,4.348778,3.304518,6.672397,4.166831,3.592012,6.450340,6.733516,3.247384,5.143747,7.166998,10.572911,3.868961,5.310744,4.429164,2.513701,4.344628,4.456566,8.858329,4.029733,9.344372,6.572911,6.226464,1.714582,3.746135,2.834822,9.342553,4.594343,5.429164,5.695226,4.556564,6.035703,2.429164,2.482148,5.360974,7.068190,1.714582,1.714582,3.234509,2.194655,4.561856,2.530982,2.050909,3.807420,2.621744,8.236584,3.429164,4.380331,1.146501,2.760662,2.429164,3.429164,2.905087,2.430561,4.951845,2.093516,3.147218,3.046758,2.617594,4.293040,1.895389,0.000000,2.339799,2.429164,2.726355,6.131973,2.900936,5.685823,6.658126,1.127823,1.773114,3.328025,1.714582,1.184279,4.489771,1.510229,3.022150,5.755114,2.429164,2.611368,2.779339,3.402864,1.923086,2.105290,3.753039,6.323875,2.534454,4.894710,3.212654,2.252892,0.678200,1.107365,1.429164,1.785270,3.073058,4.680276,3.212359,2.394858,1.639448,3.109440,1.714582,1.714582,2.714582,3.650120,2.779044,4.714582,2.603067,0.000000,2.540680,2.969844,1.489476,1.684426,1.315574,1.113591,1.714582,1.171827,0.000000,0.000000,4.059505,2.742663,2.313498,0.884334,0.544830,0.455170,2.921984,0.078016,2.000000,1.235483,1.764517,3.093811,1.906189,3.904280,1.786372,1.525051,1.904113,0.880183,3.000000,0.000000,0.000000,0.692728,2.714582,1.836474,1.756216,0.000000,1.000000,1.960441,1.039559,2.637540,3.362460,1.677099,0.322901,1.267714,0.732286,3.393756,0.606244,0.000000,1.681249,1.873957,1.714582,3.683325,3.143747,3.316675,1.586464,0.000000,3.114564,2.429164,4.415611,2.741689,2.714582,2.584389,0.844775,1.714582,2.988522,4.417686,4.143747,5.396805,6.758419,1.735463,2.561433,1.438567,2.971792,3.143747,1.304223,0.714582,1.714582,2.968615,3.460550,1.714582,2.007327,1.000000,1.136419,3.416585,1.446996,1.000000,1.989496,2.719834,0.714582,2.576088,0.853077,1.714582,1.996823,2.432341,0.003177,0.000000,0.140570,3.424886,2.004278,1.714582,1.714582,2.714582,1.286519,1.000000,0.000000,2.571809,3.714582,0.713608,0.000000,0.000000,0.000000,0.000000,1.147769,3.006098,2.846133,0.000000,1.000000,0.000000,1.722756,1.853204,1.424040,1.005124,0.994876,1.868577,2.131423,0.000000,1.578035,0.421965,0.000000,0.000000,0.000000,1.000000,0.000000,0.580111,0.419889,0.000000,0.000000,0.000000,0.153021,0.846979,0.000000,0.000000,0.000000,0.000000,0.440515,0.559485,0.000000,2.000000,1.000000,0.000000,0.728008,1.271992,0.157172,0.842828,1.000000,0.000000,0.000000,0.730083,1.269917,0.159247,1.714582,1.126170,0.000000,2.000000,0.000000};
    prop->getBackground()->spc->setData(bgrData);

    Spectrum smoothSpc;
    NcLibrary::smoothSpectrum(*spc, smoothSpc, prop->getSmoothParams());

    Spectrum bgr;
    if (auto rawBgr = prop->getBackgroundSpc()) {
        NcLibrary::smoothSpectrum(*rawBgr, bgr, prop->getSmoothParams());

        for (int i = 0; i < bgr.getSize(); i++) {
            bgr[i] = bgr[i] / rawBgr->getAcqTime() * spc->getAcqTime();
            smoothSpc[i] -= bgr[i];
            if (smoothSpc[i] < 0) smoothSpc[i] = 0;
        }
    }

    // Processing
    // Step 0: Generate tranfer function
    BinSpectrum TF;
    BinSpectrum BinSpec;
    BinSpectrum BGEroBinSpec;
    Spectrum BGEroChSpec;
    Spectrum PPChSpec;
    PeakSearch::TransferFunct(TF, prop->getFWHM(), prop->getCoeffcients());

      // Step 2: ReBinning
    double _BinSpec[BINSIZE];
    NcLibrary::ReBinning(smoothSpc, TF, BinSpec);

    // Step 3: BGErosion
    PeakSearch::BGErosion(BinSpec, prop->interCoeff, BGEroBinSpec, TF, prop->getCoeffcients());

//    // Step 4:ReturnReBinning
    Spectrum reBincEmptySpc, _reBincEmptySpc;
    PeakSearch::ReturnReBinning(BGEroBinSpec, TF, reBincEmptySpc);
    NcLibrary::smoothSpectrum(reBincEmptySpc, BGEroChSpec, prop->getSmoothParams());

    // Step 5:BGSubtration
    PeakSearch::BGSubtration(smoothSpc, BGEroChSpec, &PPChSpec, prop->getSmoothParams()); // Chek

    Energy totalEn1 = 0;
    Energy totalEn2 = 0;
    Threshold range1 = {26 - 1, 47 - 1};
    Threshold range2 = {126 - 1, 163 - 1};
    for (int i = range1.first; i <= range1.second; i++) {
        totalEn1 += PPChSpec[i];
    }
    for (int i = range2.first; i <= range2.second; i++) {
        totalEn2 += PPChSpec[i];
    }

    totalEn1 /= (6.943520005 * spc->getAcqTime());
    totalEn2 /= (9.796878 * spc->getAcqTime());

    // A -> SUm1, B -> Sum2
    // Ba -> (80, 360), {
    // Eu -> (122, 344)
    // TP -> 0.6
//    auto settingMgr = 이은채
    auto settingMgr = ComponentManager::instance().settingManager();
    auto isotopeProfile = settingMgr->getIsotopeProfile();
    Threshold srcThreshold = isotopeProfile->threshold_energy;

    auto thickness = ndt::estimate_tc_from_Est_E2(totalEn1, totalEn2, {-0.000896378402362090, 0.171065811466785, 1.84343479877323},
                                 ndt::Mass_Attenuation_coefficient_Iron(srcThreshold.first, ALUMINUM),
                                 ndt::Mass_Attenuation_coefficient_Iron(srcThreshold.second, ALUMINUM),
                                 ndt::Mass_Attenuation_coefficient_Iron(srcThreshold.first, IRON),
                                 ndt::Mass_Attenuation_coefficient_Iron(srcThreshold.second, IRON),
                                 settingMgr->getPipeThickness(), 0.5);

    return ClogEstimation{
        .thickness = thickness,
        .netCount1 = totalEn1,
        .netCount2 = totalEn2,
    };
}
